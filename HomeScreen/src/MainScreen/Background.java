/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainScreen;

import FileScroll.FileScroll;
import static MainScreen.Weather.getWeather;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import weather.CantFindWeatherException;
import java.net.URL;
import javax.swing.Timer;

/**
 *
 * @author Paul
 */
public class Background extends javax.swing.JPanel {

    FileScroll testScroller;
    URL resource1 = this.getClass().getResource("/Res/clouds.jpg");
    Image clouds = Toolkit.getDefaultToolkit().getImage(resource1);
    URL resource2 = this.getClass().getResource("/Res/rain.jpg");
    Image rain = Toolkit.getDefaultToolkit().getImage(resource2);
    URL resource3 = this.getClass().getResource("/Res/sun.jpg");
    Image sun = Toolkit.getDefaultToolkit().getImage(resource3);
    URL resource4 = this.getClass().getResource("/Res/twitter.jpg");
    Image twitter = Toolkit.getDefaultToolkit().getImage(resource4);
    public static boolean raining, cloudy, sunny;
    int refreshRate = 10000; // Rate at which the background refreshes based on the current weather (in milliseconds)

    /**
     * Creates new form Background
     */
    public Background() {
        initComponents();
        testScroller = new FileScroll(login.Interface.fileLocations, this, 0, 0);
        Timer t = new Timer(refreshRate, new TimerListener());
        t.start();
    }

    //Acquires the current weather conditions on set intervals
    private class TimerListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                raining = getWeather("Toronto").getItem().getCondition().getText().toLowerCase().contains("rain"); // check for rain
                cloudy = getWeather("Toronto").getItem().getCondition().getText().toLowerCase().contains("cloud"); // check for cloud
                sunny = getWeather("Toronto").getItem().getCondition().getText().toLowerCase().contains("sun"); // check for sun
            } catch (CantFindWeatherException ex) {
                Logger.getLogger(Background.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void paintComponent(Graphics x) {
        x.setColor(Color.black); // Creates a black background
        x.fillRect(0, 0, 1920, 1080);
        x.drawImage(twitter, 0, 0, this);
        //Sets background image according to current weather conditions
        if (raining) {
            x.drawImage(rain, 640 * 2, 0, this);
        } else if (cloudy) {
            x.drawImage(clouds, 640 * 2, 0, this);
        } else {
            x.drawImage(sun, 640 * 2, 0, this);
        }
        testScroller.draw(x); // Draws an image slideshow in the center of the screen
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
